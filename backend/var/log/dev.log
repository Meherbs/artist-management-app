[2021-10-15 20:20:35] console.CRITICAL: Error thrown while running command ""debug:log"". Message: "Command "debug:log" is not defined.  Did you mean one of these?     debug:autowiring     debug:config     debug:container     debug:event-dispatcher     debug:router     debug:swiftmailer" {"exception":"[object] (Symfony\\Component\\Console\\Exception\\CommandNotFoundException(code: 0): Command \"debug:log\" is not defined.\n\nDid you mean one of these?\n    debug:autowiring\n    debug:config\n    debug:container\n    debug:event-dispatcher\n    debug:router\n    debug:swiftmailer at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\symfony\\console\\Application.php:676)","command":"\"debug:log\"","message":"Command \"debug:log\" is not defined.\n\nDid you mean one of these?\n    debug:autowiring\n    debug:config\n    debug:container\n    debug:event-dispatcher\n    debug:router\n    debug:swiftmailer"} []
[2021-10-15 20:20:47] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 20:20:47] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'celebrity' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'celebrity' */ WHERE k.table_name = 'celebrity' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'celebrity' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'celebrity' [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'email_adress' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'email_adress' */ WHERE k.table_name = 'email_adress' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'email_adress' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'email_adress' [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'representative' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'representative' */ WHERE k.table_name = 'representative' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'representative' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'representative' [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'reset_password_request' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'reset_password_request' */ WHERE k.table_name = 'reset_password_request' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'reset_password_request' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'reset_password_request' [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'user' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'user' */ WHERE k.table_name = 'user' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'user' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:20:50] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'user' [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 20:21:14] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 20:21:19] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 20:21:19] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-15 20:21:19] doctrine.DEBUG: CREATE TABLE log (id INT AUTO_INCREMENT NOT NULL, user_id INT DEFAULT NULL, message LONGTEXT NOT NULL, context LONGTEXT NOT NULL COMMENT '(DC2Type:array)', level SMALLINT NOT NULL, level_name VARCHAR(50) NOT NULL, extra LONGTEXT DEFAULT NULL COMMENT '(DC2Type:array)', created_at DATETIME NOT NULL, INDEX IDX_8F3F68C5A76ED395 (user_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2021-10-15 20:21:19] doctrine.DEBUG: ALTER TABLE log ADD CONSTRAINT FK_8F3F68C5A76ED395 FOREIGN KEY (user_id) REFERENCES `user` (id) [] []
[2021-10-15 20:21:19] doctrine.DEBUG: INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?) ["DoctrineMigrations\\Version [...]","[object] (DateTimeImmutable: {\"date\":\"2021-10-15 20:21:19.068867\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})",190] []
[2021-10-15 20:21:19] doctrine.DEBUG: "COMMIT" [] []
[2021-10-15 20:23:49] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-15 20:23:49] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-15 20:23:50] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-15 20:25:01] request.INFO: Matched route "api_celebrities_post_collection". {"route":"api_celebrities_post_collection","route_parameters":{"_route":"api_celebrities_post_collection","_controller":"api_platform.action.post_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"post"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"POST"} []
[2021-10-15 20:25:01] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-15 20:25:01] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:25:01] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:25:01] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:25:02] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-15 20:25:02] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:25:02] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:25:02] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:25:02] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-15 20:25:02] doctrine.DEBUG: INSERT INTO celebrity (name, birthday, bio, created_at, updated_at) VALUES (?, ?, ?, ?, ?) {"1":"representative 4","2":"2002-12-12 00:00:00","3":"test2","4":"[object] (DateTimeImmutable: {\"date\":\"2021-10-15 20:25:02.388080\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})","5":null} []
[2021-10-15 20:25:02] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"2App\\Entity\\Celebrity crea [...]","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":"[object] (App\\Entity\\User: {})"},"6":"2021-10-15 20:25:02","7":2} []
[2021-10-15 20:25:02] db.INFO: 2App\Entity\Celebrity created new [] []
[2021-10-15 20:25:02] doctrine.DEBUG: "COMMIT" [] []
[2021-10-15 20:25:02] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.birthday AS birthday_3, t0.bio AS bio_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM celebrity t0 WHERE t0.id = ? [2] []
[2021-10-15 20:50:26] request.INFO: Matched route "api_celebrities_patch_item". {"route":"api_celebrities_patch_item","route_parameters":{"_route":"api_celebrities_patch_item","_controller":"api_platform.action.patch_item","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_item_operation_name":"patch","id":"2"},"request_uri":"http://127.0.0.1:8000/api/celebrities/2","method":"PATCH"} []
[2021-10-15 20:50:26] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-15 20:50:26] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:50:26] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:50:26] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:50:27] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-15 20:50:27] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:50:27] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:50:27] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 20:50:27] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ WHERE c0_.id = ? [2] []
[2021-10-15 20:50:27] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-15 20:50:27] doctrine.DEBUG: UPDATE celebrity SET name = ?, birthday = ?, updated_at = ? WHERE id = ? ["celebrity 4","1990-12-12 00:00:00","[object] (DateTimeImmutable: {\"date\":\"2021-10-15 20:50:27.387085\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})",2] []
[2021-10-15 20:50:27] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"2App\\Entity\\Celebrity updated","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":"[object] (App\\Entity\\User: {})"},"6":"2021-10-15 20:50:27","7":2} []
[2021-10-15 20:50:27] db.INFO: 2App\Entity\Celebrity updated [] []
[2021-10-15 20:50:27] doctrine.DEBUG: "COMMIT" [] []
[2021-10-15 20:50:27] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.birthday AS birthday_3, t0.bio AS bio_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM celebrity t0 WHERE t0.id = ? [2] []
[2021-10-15 22:13:14] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:13:14] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'celebrity' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'celebrity' */ WHERE k.table_name = 'celebrity' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'celebrity' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'celebrity' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'email_adress' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'email_adress' */ WHERE k.table_name = 'email_adress' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'email_adress' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'email_adress' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'log' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'log' */ WHERE k.table_name = 'log' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'log' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'log' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'representative' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'representative' */ WHERE k.table_name = 'representative' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'representative' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'representative' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'reset_password_request' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'reset_password_request' */ WHERE k.table_name = 'reset_password_request' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'reset_password_request' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'reset_password_request' [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'user' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'user' */ WHERE k.table_name = 'user' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'user' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:13:20] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'user' [] []
[2021-10-15 22:23:08] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-15 22:23:09] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-15 22:23:09] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-15 22:23:49] request.INFO: Matched route "api_celebrities_patch_item". {"route":"api_celebrities_patch_item","route_parameters":{"_route":"api_celebrities_patch_item","_controller":"api_platform.action.patch_item","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_item_operation_name":"patch","id":"2"},"request_uri":"http://127.0.0.1:8000/api/celebrities/2","method":"PATCH"} []
[2021-10-15 22:23:49] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-15 22:23:49] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 22:23:49] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 22:23:49] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 22:23:50] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-15 22:23:50] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 22:23:50] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 22:23:50] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-15 22:23:50] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ WHERE c0_.id = ? [2] []
[2021-10-15 22:23:50] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-15 22:23:50] doctrine.DEBUG: UPDATE celebrity SET name = ?, birthday = ?, bio = ?, updated_at = ? WHERE id = ? ["celebrity 2","1990-12-12 00:00:00","update","[object] (DateTimeImmutable: {\"date\":\"2021-10-15 22:23:50.594310\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})",2] []
[2021-10-15 22:23:50] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"2Celebrity updated","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":"[object] (App\\Entity\\User: {})"},"6":"2021-10-15 22:23:50","7":2} []
[2021-10-15 22:23:50] db.INFO: 2Celebrity updated [] []
[2021-10-15 22:23:50] doctrine.DEBUG: "COMMIT" [] []
[2021-10-15 22:23:50] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.birthday AS birthday_3, t0.bio AS bio_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM celebrity t0 WHERE t0.id = ? [2] []
[2021-10-15 22:26:11] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:26:11] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:26:11] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:26:11] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:26:11] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:26:11] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:26:11] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:26:14] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:26:14] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-15 22:26:14] doctrine.DEBUG: CREATE TABLE connections (id INT AUTO_INCREMENT NOT NULL, representative_id INT NOT NULL, celebrity_id INT NOT NULL, is_agent TINYINT(1) NOT NULL, is_publicist TINYINT(1) NOT NULL, is_manager TINYINT(1) NOT NULL, INDEX IDX_BFF6FC15FC3FF006 (representative_id), INDEX IDX_BFF6FC159D12EF95 (celebrity_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2021-10-15 22:26:14] doctrine.DEBUG: ALTER TABLE connections ADD CONSTRAINT FK_BFF6FC15FC3FF006 FOREIGN KEY (representative_id) REFERENCES representative (id) [] []
[2021-10-15 22:26:14] doctrine.DEBUG: ALTER TABLE connections ADD CONSTRAINT FK_BFF6FC159D12EF95 FOREIGN KEY (celebrity_id) REFERENCES celebrity (id) [] []
[2021-10-15 22:26:14] doctrine.DEBUG: INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?) ["DoctrineMigrations\\Version [...]","[object] (DateTimeImmutable: {\"date\":\"2021-10-15 22:26:14.405940\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})",274] []
[2021-10-15 22:26:14] doctrine.DEBUG: "COMMIT" [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:41:09] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'celebrity' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'celebrity' */ WHERE k.table_name = 'celebrity' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'celebrity' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'celebrity' [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'connections' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'connections' */ WHERE k.table_name = 'connections' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'connections' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'connections' [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'email_adress' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'email_adress' */ WHERE k.table_name = 'email_adress' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'email_adress' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'email_adress' [] []
[2021-10-15 22:41:10] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'log' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'log' */ WHERE k.table_name = 'log' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'log' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'log' [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'representative' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'representative' */ WHERE k.table_name = 'representative' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'representative' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'representative' [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'reset_password_request' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'reset_password_request' */ WHERE k.table_name = 'reset_password_request' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'reset_password_request' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'reset_password_request' [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'user' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'user' */ WHERE k.table_name = 'user' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'user' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:11] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'user' [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'artist_management' AND TABLE_NAME = 'doctrine_migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'doctrine_migration_versions' */ WHERE k.table_name = 'doctrine_migration_versions' AND k.table_schema = 'artist_management' /*!50116 AND c.constraint_schema = 'artist_management' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'doctrine_migration_versions' AND TABLE_SCHEMA = 'artist_management' ORDER BY SEQ_IN_INDEX ASC [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'doctrine_migration_versions' [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:41:18] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:41:20] doctrine.DEBUG: SELECT * FROM doctrine_migration_versions [] []
[2021-10-15 22:41:20] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-15 22:41:20] doctrine.DEBUG: ALTER TABLE connections CHANGE is_agent is_agent TINYINT(1) DEFAULT '0' NOT NULL, CHANGE is_publicist is_publicist TINYINT(1) DEFAULT '0' NOT NULL, CHANGE is_manager is_manager TINYINT(1) DEFAULT '0' NOT NULL [] []
[2021-10-15 22:41:20] doctrine.DEBUG: INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?) ["DoctrineMigrations\\Version [...]","[object] (DateTimeImmutable: {\"date\":\"2021-10-15 22:41:20.364118\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})",63] []
[2021-10-15 22:41:20] doctrine.DEBUG: "COMMIT" [] []
[2021-10-17 01:53:31] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 01:53:31] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 01:53:32] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-17 01:59:08] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 01:59:08] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 01:59:09] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-17 14:43:57] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 14:43:57] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 14:43:58] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-17 14:45:46] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 14:45:46] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 14:45:47] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-17 15:01:46] request.INFO: Matched route "forget_password_api". {"route":"forget_password_api","route_parameters":{"_route":"forget_password_api","_controller":"App\\Controller\\ApiController::forgetPassword"},"request_uri":"http://127.0.0.1:8000/api/forget-password","method":"POST"} []
[2021-10-17 15:01:46] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-17 15:01:46] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-17 15:01:46] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-17 15:01:46] security.INFO: An AuthenticationException was thrown; redirecting to authentication entry point. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException(code: 0): A Token was not found in the TokenStorage. at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\symfony\\security-http\\Firewall\\AccessListener.php:69)"} []
[2021-10-17 15:01:46] security.DEBUG: Calling Authentication entry point. [] []
[2021-10-17 15:03:09] request.INFO: Matched route "forget_password_api". {"route":"forget_password_api","route_parameters":{"_route":"forget_password_api","_controller":"App\\Controller\\ApiController::forgetPassword"},"request_uri":"http://127.0.0.1:8000/api/forget-password","method":"POST"} []
[2021-10-17 15:03:09] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-17 15:03:09] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-17 15:03:09] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-17 15:03:09] security.INFO: An AuthenticationException was thrown; redirecting to authentication entry point. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException(code: 0): A Token was not found in the TokenStorage. at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\symfony\\security-http\\Firewall\\AccessListener.php:69)"} []
[2021-10-17 15:03:09] security.DEBUG: Calling Authentication entry point. [] []
[2021-10-17 16:59:44] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 16:59:45] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 16:59:45] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-17 17:02:34] request.INFO: Matched route "forget_password_api". {"route":"forget_password_api","route_parameters":{"_route":"forget_password_api","_controller":"App\\Controller\\ApiController::forgetPassword"},"request_uri":"http://127.0.0.1:8000/api/forget-password","method":"POST"} []
[2021-10-17 17:02:34] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-17 17:02:34] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-17 17:02:34] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-17 17:02:34] security.INFO: An AuthenticationException was thrown; redirecting to authentication entry point. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException(code: 0): A Token was not found in the TokenStorage. at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\symfony\\security-http\\Firewall\\AccessListener.php:69)"} []
[2021-10-17 17:02:34] security.DEBUG: Calling Authentication entry point. [] []
[2021-10-17 17:09:08] request.INFO: Matched route "forget_password_api". {"route":"forget_password_api","route_parameters":{"_route":"forget_password_api","_controller":"App\\Controller\\ApiController::forgetPassword"},"request_uri":"http://127.0.0.1:8000/auth/forget-password","method":"POST"} []
[2021-10-17 17:09:08] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.email = ? ["meherbensalah4@gmail.com"] []
[2021-10-17 17:09:08] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-17 17:09:08] doctrine.DEBUG: INSERT INTO reset_password_request (date_add, expire_at, token, user_id) VALUES (?, ?, ?, ?) {"1":"2021-10-17 17:09:08","2":"2021-10-17 17:24:08","3":"8a1c63aa6b9ffdb1e8f74f63a4 [...]","4":2} []
[2021-10-17 17:09:08] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"ResetPasswordRequest with  [...]","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":null},"6":"2021-10-17 17:09:08","7":null} []
[2021-10-17 17:09:08] db.INFO: ResetPasswordRequest with id 1 created [] []
[2021-10-17 17:09:08] doctrine.DEBUG: "COMMIT" [] []
[2021-10-17 17:12:57] request.INFO: Matched route "forget_password_api". {"route":"forget_password_api","route_parameters":{"_route":"forget_password_api","_controller":"App\\Controller\\ApiController::forgetPassword"},"request_uri":"http://127.0.0.1:8000/auth/forget-password","method":"POST"} []
[2021-10-17 17:12:57] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.email = ? ["meherbensalah4@gmail.com"] []
[2021-10-17 17:12:57] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-17 17:12:57] doctrine.DEBUG: INSERT INTO reset_password_request (date_add, expire_at, token, user_id) VALUES (?, ?, ?, ?) {"1":"2021-10-17 17:12:57","2":"2021-10-17 17:27:57","3":"5c9b8f06a4576ced68cc81b0e3 [...]","4":2} []
[2021-10-17 17:12:57] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"ResetPasswordRequest with  [...]","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":null},"6":"2021-10-17 17:12:57","7":null} []
[2021-10-17 17:12:57] db.INFO: ResetPasswordRequest with id 2 created [] []
[2021-10-17 17:12:57] doctrine.DEBUG: "COMMIT" [] []
[2021-10-17 17:29:48] request.INFO: Matched route "reset_password_api". {"route":"reset_password_api","route_parameters":{"_route":"reset_password_api","_controller":"App\\Controller\\ApiController::resetPassword"},"request_uri":"http://127.0.0.1:8000/auth/reset-password","method":"POST"} []
[2021-10-17 17:29:48] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.date_add AS date_add_1, r0_.expire_at AS expire_at_2, r0_.token AS token_3, r0_.user_id AS user_id_4 FROM reset_password_request r0_ WHERE r0_.token = ? AND r0_.expire_at > ? ["5c9b8f06a4576ced68cc81b0e3 [...]","2021-10-17 17:29:48"] []
[2021-10-17 17:31:32] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 17:31:32] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 17:31:33] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-17 19:10:42] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-17 19:10:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-17 19:10:43] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 00:32:55] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 00:32:55] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 00:32:56] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 01:04:50] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:04:50] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:04:50] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:04:50] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:04:50] security.INFO: An AuthenticationException was thrown; redirecting to authentication entry point. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException(code: 0): A Token was not found in the TokenStorage. at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\symfony\\security-http\\Firewall\\AccessListener.php:69)"} []
[2021-10-18 01:04:50] security.DEBUG: Calling Authentication entry point. [] []
[2021-10-18 01:05:03] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 01:05:03] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:05:04] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 01:05:04] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:05:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:05:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:05:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:05:04] security.INFO: Guard authentication failed. {"exception":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Exception\\InvalidTokenException(code: 0): Invalid JWT Token at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\lexik\\jwt-authentication-bundle\\Security\\Guard\\JWTTokenAuthenticator.php:119, Lexik\\Bundle\\JWTAuthenticationBundle\\Exception\\JWTDecodeFailureException(code: 0): Unable to verify the given JWT through the given configuration. If the \"lexik_jwt_authentication.encoder\" encryption options have been changed since your last authentication, please renew the token. If the problem persists, verify that the configured keys/passphrase are valid. at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\lexik\\jwt-authentication-bundle\\Encoder\\LcobucciJWTEncoder.php:64)","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:05:04] security.DEBUG: The "Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator" authenticator set the response. Any later authenticator will not be called {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:25] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:07:25] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:07:25] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:25] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:25] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:25] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:07:25] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:25] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:25] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:26] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:07:27] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:07:27] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:07:27] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:27] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:27] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:28] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:07:28] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:28] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:28] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:28] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:07:33] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:07:33] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:07:33] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:33] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:33] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:33] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:07:33] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:33] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:33] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:07:33] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:10:16] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:10:16] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:10:16] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:10:16] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:10:16] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:10:16] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:10:16] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:10:16] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:10:16] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:10:17] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:11:36] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:11:36] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:11:36] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:11:36] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:11:36] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:11:36] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:11:36] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:11:36] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:11:36] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:11:36] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:15:13] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 01:15:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:15:14] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 01:15:15] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:15:15] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:15:15] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:15:15] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:15:15] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:15:15] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:15:15] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:15:15] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:15:15] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:15:15] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:18:00] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:18:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:18:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:18:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:18:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:18:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:18:00] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:18:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:18:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:18:00] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:20:12] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:20:12] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:20:12] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:20:12] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:20:12] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:20:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:20:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:20:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:20:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:20:13] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:22:28] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:22:28] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:22:28] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:22:28] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:22:28] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:22:29] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:22:29] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:22:29] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:22:29] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:22:29] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:27:58] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:27:58] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:27:58] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:27:58] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:27:58] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:27:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:27:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:27:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:27:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:27:59] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:34:08] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:34:08] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:34:08] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:08] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:08] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:09] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:34:09] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:09] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:09] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:09] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:34:22] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:34:22] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:34:22] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:22] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:22] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:22] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:34:22] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:22] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:22] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:34:22] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:35:14] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:35:14] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:35:14] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:14] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:14] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:14] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:35:14] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:14] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:14] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:14] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 01:35:20] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 01:35:20] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 01:35:20] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:20] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:20] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:20] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 01:35:20] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:20] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:20] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 01:35:20] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 13:13:04] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 13:13:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 13:13:05] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 13:13:06] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 13:13:06] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 13:13:06] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:13:06] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:13:06] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:13:06] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 13:13:06] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:13:06] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:13:06] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:13:06] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 13:14:00] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 13:14:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 13:14:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:14:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:14:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:14:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 13:14:00] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:14:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:14:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 13:14:00] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 14:00:04] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:00:05] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:00:05] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:00:05] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:00:05] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:00:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:00:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:00:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:00:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:00:06] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:04:18] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:04:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:04:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:04:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:04:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:04:19] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:04:19] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:04:19] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:04:19] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:04:19] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:05:17] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:05:17] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:05:17] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:17] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:17] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:17] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:05:17] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:17] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:17] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:17] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:05:21] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:05:21] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:05:21] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:21] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:21] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:21] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:05:22] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:22] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:22] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:05:22] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:15:35] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 14:15:35] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:15:36] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 14:15:37] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 14:15:37] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:15:37] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:37] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:37] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:37] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:15:37] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:37] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:37] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:37] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 14:15:47] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:15:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:15:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:47] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:15:47] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:47] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:47] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:15:47] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:17:04] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:17:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:17:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:17:04] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:04] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:04] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:05] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:17:11] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:17:11] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:17:11] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:11] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:11] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:17:12] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:12] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:12] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:12] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:17:13] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:17:13] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:17:13] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:13] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:13] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:17:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:17:14] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:19:42] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:19:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:19:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:42] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:19:43] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:43] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:43] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:43] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:19:49] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:19:49] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:19:49] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:49] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:49] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:49] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:19:49] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:49] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:49] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:49] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:19:52] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:19:52] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:19:52] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:52] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:52] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:52] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:19:52] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:52] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:52] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:19:52] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:10] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:10] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:29] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:29] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:29] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:29] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:29] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:29] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:29] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:29] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:29] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:29] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:39] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:39] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:39] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:39] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:39] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:39] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:39] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:39] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:39] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:40] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:42] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:42] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:43] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:43] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:43] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:43] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:47] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:47] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:47] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:47] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:47] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:47] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:52] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:52] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:52] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:52] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:52] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:52] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:52] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:52] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:52] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:53] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:20:54] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:20:54] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:20:54] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:54] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:54] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:55] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:20:55] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:55] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:55] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:20:55] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:21:01] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:21:01] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:21:01] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:21:01] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:21:01] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:21:02] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:21:02] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:21:02] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:21:02] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:21:02] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:22:04] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:22:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:22:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:22:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:05] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:22:22] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:22:22] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:22:22] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:22] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:22] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:22] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:22:22] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:22] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:22] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:22:22] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:40:38] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:40:38] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:40:38] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:40:38] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:40:39] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:40:39] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:40:39] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:40:39] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:40:39] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:40:39] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:42:10] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:42:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:42:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:42:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:42:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:42:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:42:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:42:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:42:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:42:11] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:43:25] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:43:25] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:43:25] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:25] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:25] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:25] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:43:25] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:25] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:25] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:26] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:43:35] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:43:35] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:43:35] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:35] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:35] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:35] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:43:35] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:35] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:35] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:43:35] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:47:24] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:47:24] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:47:24] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:47:24] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:47:24] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:47:24] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:47:24] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:47:24] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:47:24] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:47:25] request.CRITICAL: Uncaught PHP Exception ApiPlatform\Core\Exception\RuntimeException: "The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the "api_platform.eager_loading.max_joins" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the "enable_max_depth" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth)." at D:\Xampp\htdocs\upwork\artist-management-app\backend\vendor\api-platform\core\src\Bridge\Doctrine\Orm\Extension\EagerLoadingExtension.php line 137 {"exception":"[object] (ApiPlatform\\Core\\Exception\\RuntimeException(code: 0): The total number of joined relations has exceeded the specified maximum. Raise the limit if necessary with the \"api_platform.eager_loading.max_joins\" configuration key (https://api-platform.com/docs/core/performance/#eager-loading), or limit the maximum serialization depth using the \"enable_max_depth\" option of the Symfony serializer (https://symfony.com/doc/current/components/serializer.html#handling-serialization-depth). at D:\\Xampp\\htdocs\\upwork\\artist-management-app\\backend\\vendor\\api-platform\\core\\src\\Bridge\\Doctrine\\Orm\\Extension\\EagerLoadingExtension.php:137)"} []
[2021-10-18 14:50:30] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:50:31] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:50:31] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:50:31] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:50:31] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:50:31] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:50:31] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:50:31] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:50:31] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:50:31] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:50:31] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:52:35] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:52:35] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:52:35] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:52:35] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:52:36] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:52:36] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:52:36] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:52:36] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:52:36] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:52:36] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:52:36] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:53:48] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:53:48] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:53:48] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:53:48] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:53:48] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:53:48] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:53:49] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:53:49] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:53:49] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:53:49] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:53:49] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:54:18] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:54:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:54:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:18] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:54:18] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:18] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:18] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:18] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:54:18] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:54:42] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:54:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:54:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:42] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:42] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:54:42] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:42] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:42] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:42] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:54:42] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:54:51] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:54:51] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:54:51] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:51] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:51] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:51] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:54:51] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:51] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:51] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:54:51] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:54:51] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:56:30] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:56:30] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:56:30] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:56:30] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:56:30] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:56:30] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:56:30] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:56:30] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:56:30] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:56:31] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:56:31] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:58:23] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:58:23] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:58:23] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:23] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:23] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:24] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:58:24] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:24] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:24] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:24] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:58:24] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:58:31] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:58:31] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:58:31] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:31] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:31] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:31] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:58:31] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:31] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:31] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:32] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:58:32] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:58:39] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:58:39] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:58:39] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:39] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:39] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:39] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:58:39] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:39] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:39] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:40] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:58:40] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:58:41] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:58:41] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:58:41] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:41] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:41] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:41] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:58:42] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:42] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:42] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:58:42] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:58:42] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:59:10] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:59:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:59:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:59:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:11] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:59:11] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 14:59:13] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 14:59:13] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 14:59:13] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:13] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:13] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 14:59:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 14:59:13] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 14:59:13] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:00:12] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:00:12] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:00:12] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:12] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:12] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:00:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:13] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:00:13] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:00:17] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:00:17] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:00:17] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:17] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:17] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:17] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:00:17] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:17] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:17] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:17] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:00:17] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:00:34] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:00:34] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:00:34] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:34] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:34] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:35] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:00:35] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:35] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:35] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:35] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:00:35] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:00:39] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:00:39] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:00:39] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:39] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:39] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:39] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:00:39] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:39] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:39] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:00:40] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:00:40] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:01:25] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:01:25] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:01:25] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:25] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:25] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:25] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:01:25] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:25] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:25] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:25] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:01:25] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:01:29] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:01:29] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:01:29] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:29] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:29] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:29] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:01:29] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:29] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:29] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:29] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:01:30] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:01:35] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:01:35] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:01:35] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:35] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:35] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:35] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:01:35] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:35] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:35] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:36] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:01:36] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:01:39] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:01:39] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:01:39] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:39] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:39] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:40] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:01:40] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:40] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:40] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:40] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:01:40] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:01:42] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:01:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:01:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:42] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:42] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:01:42] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:42] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:42] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:01:43] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:01:43] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:02:05] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:02:05] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:02:05] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:05] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:05] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:02:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:05] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:02:05] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:02:44] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:02:44] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:02:44] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:44] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:44] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:45] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:02:45] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:45] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:45] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:45] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:02:45] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:02:47] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:02:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:02:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:47] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:02:47] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:47] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:47] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:02:48] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:02:48] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:03:14] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:03:14] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:03:14] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:14] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:14] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:15] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:03:15] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:15] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:15] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:15] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:03:15] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:03:38] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:03:38] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:03:38] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:38] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:38] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:38] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:03:38] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:38] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:38] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:38] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:03:38] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:03:54] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:03:54] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:03:54] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:54] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:54] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:54] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:03:54] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:54] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:54] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:03:54] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:03:54] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:04:51] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:04:51] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:04:51] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:04:51] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:04:51] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:04:51] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:04:51] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:04:51] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:04:51] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:04:51] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:04:51] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:05:17] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:05:17] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:05:17] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:05:17] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:05:17] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:05:18] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:05:18] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:05:18] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:05:18] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:05:18] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:05:18] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:06:49] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:06:49] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:06:49] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:49] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:49] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:49] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:06:49] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:49] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:49] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:49] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:06:49] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:06:59] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:06:59] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:06:59] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:59] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:59] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:06:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:06:59] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:06:59] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:07:23] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:07:23] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:07:23] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:07:23] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:07:23] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:07:24] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:07:24] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:07:24] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:07:24] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:07:24] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:07:24] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:08:44] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:08:44] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:08:44] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:44] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:44] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:45] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:08:45] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:45] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:45] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:45] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:08:45] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:08:55] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:08:55] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:08:55] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:55] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:55] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:55] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:08:55] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:55] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:55] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:08:55] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:08:55] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:09:08] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:09:08] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:09:08] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:09:08] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:09:08] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:09:08] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:09:08] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:09:08] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:09:08] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:09:08] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:09:08] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:13:34] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:13:34] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:13:34] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:34] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:34] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:34] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:13:34] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:34] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:34] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:35] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:13:35] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:13:37] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:13:37] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:13:37] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:37] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:37] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:37] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:13:37] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:37] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:37] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:13:37] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:13:37] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:14:01] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:14:01] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:14:01] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:01] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:01] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:02] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:14:02] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:02] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:02] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:02] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:14:02] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:14:05] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 15:14:05] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:14:05] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:05] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:05] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:14:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:14:05] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 15:14:05] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 15:40:39] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 15:40:39] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:40:40] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 15:40:41] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 15:40:41] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:40:41] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:41] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:41] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:41] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:40:41] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:41] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:41] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:41] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 15:40:51] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:40:51] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:40:51] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:51] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:51] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:51] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:40:51] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:51] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:51] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:40:51] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:41:11] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:41:11] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:41:11] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:11] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:11] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:41:11] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:11] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:11] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:12] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:41:47] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:41:48] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:41:48] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:48] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:48] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:48] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:41:48] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:48] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:48] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:41:48] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:42:03] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:42:03] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:42:03] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:03] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:03] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:03] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:42:03] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:03] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:03] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:03] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:42:18] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:42:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:42:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:18] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:42:18] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:18] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:18] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:42:18] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:44:58] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:44:58] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:44:58] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:44:58] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:44:58] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:44:58] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:44:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:44:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:44:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:44:59] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:45:34] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:45:34] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:45:34] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:45:34] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:45:34] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:45:34] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:45:34] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:45:34] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:45:34] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:45:34] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:47:10] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:47:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:47:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:47:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:10] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:47:33] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:47:33] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:47:33] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:33] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:33] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:34] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:47:34] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:34] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:34] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:47:34] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:48:08] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:48:08] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:48:08] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:08] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:08] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:08] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:48:08] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:08] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:08] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:08] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:48:22] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:48:22] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:48:22] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:22] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:22] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:22] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:48:23] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:23] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:23] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:48:23] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:49:00] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:49:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:49:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:49:00] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:49:10] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:49:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:49:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:49:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:10] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:49:41] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:49:41] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:49:41] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:41] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:41] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:42] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:49:42] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:42] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:42] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:42] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:49:44] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:49:44] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:49:44] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:44] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:44] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:44] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:49:44] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:44] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:44] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:49:44] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:50:01] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:50:01] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:50:01] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:01] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:01] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:01] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:50:01] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:01] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:01] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:01] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:50:05] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:50:05] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:50:05] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:05] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:05] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:50:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:05] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:50:18] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:50:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:50:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:18] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:50:18] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:18] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:18] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:18] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:50:22] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:50:22] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:50:22] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:22] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:22] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:23] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:50:23] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:23] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:23] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:50:23] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:51:12] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:51:12] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:51:12] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:51:12] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:51:12] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:51:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:51:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:51:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:51:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:51:13] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:55:57] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:55:57] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:55:57] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:55:57] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:55:57] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:55:57] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:55:57] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:55:57] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:55:57] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:55:58] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:57:00] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:57:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:57:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:57:00] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 15:57:10] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 15:57:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 15:57:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 15:57:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 15:57:10] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 16:00:33] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 16:00:34] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:00:34] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:00:34] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:00:34] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:00:34] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:00:34] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:00:34] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:00:34] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:00:34] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 16:01:45] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 16:01:45] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:01:45] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:01:45] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:01:45] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:01:46] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:01:46] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:01:46] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:01:46] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:01:46] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 16:04:48] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 16:04:48] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:04:48] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:04:48] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:04:48] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:04:49] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:04:49] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:04:49] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:04:49] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:04:49] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 16:18:58] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 16:18:58] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:18:58] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:18:58] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:18:58] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:18:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:18:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:18:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:18:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:18:59] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 16:19:03] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 16:19:03] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:19:03] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:03] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:03] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:19:04] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:04] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:04] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:04] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 16:19:50] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 16:19:50] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:19:50] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:50] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:50] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:50] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:19:50] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:50] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:50] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:19:50] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 16:35:53] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 16:35:53] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:35:53] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:53] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:53] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:53] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:35:53] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:53] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:53] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:54] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 16:35:57] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 16:35:57] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 16:35:57] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:57] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:57] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:57] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 16:35:57] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:57] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:57] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 16:35:57] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 21:46:02] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 21:46:03] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 21:46:03] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 21:46:04] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 21:46:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 21:46:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 21:46:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 21:46:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 21:46:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 21:46:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 21:46:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 21:46:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 21:46:05] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 22:26:33] request.INFO: Matched route "api_users_create_user_collection". {"route":"api_users_create_user_collection","route_parameters":{"_route":"api_users_create_user_collection","_controller":"App\\Controller\\Api\\CreateUser","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"create_user"},"request_uri":"http://127.0.0.1:8000/api/users/create","method":"POST"} []
[2021-10-18 22:26:33] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:26:33] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:33] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:33] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:34] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:26:34] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:34] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:34] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:34] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.email = ? ["maherbensalah06@gmail.com"] []
[2021-10-18 22:26:34] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.username = ? ["test"] []
[2021-10-18 22:26:35] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-18 22:26:35] doctrine.DEBUG: INSERT INTO `user` (username, email, roles, password, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?) {"1":"test","2":"maherbensalah06@gmail.com","3":["ROLE_ADMIN","ROLE_USER"],"4":"$argon2id$v=19$m=65536,t=4 [...]","5":"2021-10-18 22:26:35","6":"[object] (DateTimeImmutable: {\"date\":\"2021-10-18 22:26:35.076474\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})"} []
[2021-10-18 22:26:35] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"User with id 3 created","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":"[object] (App\\Entity\\User: {})"},"6":"2021-10-18 22:26:35","7":2} []
[2021-10-18 22:26:35] db.INFO: User with id 3 created [] []
[2021-10-18 22:26:35] doctrine.DEBUG: "COMMIT" [] []
[2021-10-18 22:26:36] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:26:36] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:26:36] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:36] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:36] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:37] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:26:37] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:37] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:37] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:26:37] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:27:09] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 22:27:09] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:27:09] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:09] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:09] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:09] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:27:09] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:09] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:09] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:09] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 22:27:13] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:27:13] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:27:13] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:13] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:13] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:27:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:14] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:27:43] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:27:43] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:27:43] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:43] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:43] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:27:43] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:43] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:43] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:43] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:27:46] request.INFO: Matched route "api_users_get_item". {"route":"api_users_get_item","route_parameters":{"_route":"api_users_get_item","_controller":"api_platform.action.get_item","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_item_operation_name":"get","id":"3"},"request_uri":"http://127.0.0.1:8000/api/users/3","method":"GET"} []
[2021-10-18 22:27:46] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:27:46] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:46] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:46] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:46] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:27:46] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:46] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:46] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:27:46] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.id = ? [3] []
[2021-10-18 22:28:06] request.INFO: Matched route "api_users_patch_item". {"route":"api_users_patch_item","route_parameters":{"_route":"api_users_patch_item","_controller":"api_platform.action.patch_item","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_item_operation_name":"patch","id":"3"},"request_uri":"http://127.0.0.1:8000/api/users/3","method":"PATCH"} []
[2021-10-18 22:28:06] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:28:06] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:06] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:06] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:06] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:28:06] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:06] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:06] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:06] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.id = ? [3] []
[2021-10-18 22:28:06] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-18 22:28:06] doctrine.DEBUG: UPDATE `user` SET roles = ?, updated_at = ? WHERE id = ? [["ROLE_SUPER_ADMIN","ROLE_ADMIN","ROLE_USER"],"[object] (DateTimeImmutable: {\"date\":\"2021-10-18 22:28:06.994483\",\"timezone_type\":3,\"timezone\":\"Europe/Berlin\"})",3] []
[2021-10-18 22:28:07] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"User with id 3 updated","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":"[object] (App\\Entity\\User: {})"},"6":"2021-10-18 22:28:07","7":2} []
[2021-10-18 22:28:07] db.INFO: User with id 3 updated [] []
[2021-10-18 22:28:07] doctrine.DEBUG: "COMMIT" [] []
[2021-10-18 22:28:07] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:28:07] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:28:07] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:07] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:07] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:07] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:28:08] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:08] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:08] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:08] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:28:13] request.INFO: Matched route "api_users_get_item". {"route":"api_users_get_item","route_parameters":{"_route":"api_users_get_item","_controller":"api_platform.action.get_item","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_item_operation_name":"get","id":"3"},"request_uri":"http://127.0.0.1:8000/api/users/3","method":"GET"} []
[2021-10-18 22:28:13] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:28:13] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:13] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:13] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:28:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:13] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.id = ? [3] []
[2021-10-18 22:28:26] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:28:26] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:28:26] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:26] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:26] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:27] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:28:27] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:27] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:27] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:27] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:28:47] request.INFO: Matched route "api_users_delete_item". {"route":"api_users_delete_item","route_parameters":{"_route":"api_users_delete_item","_controller":"api_platform.action.delete_item","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_item_operation_name":"delete","id":"3"},"request_uri":"http://127.0.0.1:8000/api/users/3","method":"DELETE"} []
[2021-10-18 22:28:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:28:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:48] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:28:48] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:48] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:48] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:48] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ WHERE u0_.id = ? [3] []
[2021-10-18 22:28:48] doctrine.DEBUG: "START TRANSACTION" [] []
[2021-10-18 22:28:48] doctrine.DEBUG: DELETE FROM `user` WHERE id = ? [3] []
[2021-10-18 22:28:48] doctrine.DEBUG: INSERT INTO log (message, context, level, level_name, extra, created_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?) {"1":"User with id  deleted","2":[],"3":200,"4":"INFO","5":{"clientIp":"127.0.0.1","url":"","user":"[object] (App\\Entity\\User: {})"},"6":"2021-10-18 22:28:48","7":2} []
[2021-10-18 22:28:48] db.INFO: User with id  deleted [] []
[2021-10-18 22:28:48] doctrine.DEBUG: "COMMIT" [] []
[2021-10-18 22:28:48] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:28:48] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:28:48] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:48] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:48] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:49] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:28:49] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:49] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:49] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:28:49] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:35:18] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:35:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:35:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:19] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:35:19] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:19] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:19] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:19] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:35:25] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:35:25] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:35:25] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:25] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:25] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:25] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:35:25] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:25] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:25] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:25] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:35:30] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:35:30] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:35:30] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:30] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:30] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:30] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:35:30] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:30] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:30] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:30] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:35:35] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:35:35] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:35:35] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:35] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:35] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:36] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:35:36] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:36] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:36] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:36] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:35:43] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:35:43] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:35:43] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:43] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:43] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:35:44] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:44] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:44] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:35:44] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:05] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:05] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:05] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:05] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:05] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:05] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:11] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:11] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:11] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:11] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:11] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:11] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:11] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:11] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:11] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:16] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:16] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:16] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:16] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:16] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:17] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:17] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:17] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:17] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:17] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:26] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:26] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:26] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:26] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:26] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:26] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:26] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:26] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:26] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:27] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:30] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:30] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:30] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:30] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:30] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:31] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:31] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:31] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:31] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:31] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:45] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:45] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:45] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:45] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:45] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:45] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:45] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:45] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:45] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:45] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:50] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:50] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:50] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:50] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:50] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:50] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:50] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:50] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:50] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:51] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:37:58] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:37:59] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:37:59] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:59] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:59] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:37:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:37:59] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:04] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:38:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:04] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:04] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:04] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:04] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:19] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:38:19] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:19] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:19] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:19] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:20] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:20] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:20] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:20] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:20] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:22] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:38:22] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:22] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:22] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:22] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:22] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:22] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:22] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:22] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:22] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:27] request.INFO: Matched route "api_users_get_collection". {"route":"api_users_get_collection","route_parameters":{"_route":"api_users_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\User","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/users","method":"GET"} []
[2021-10-18 22:38:27] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:27] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:27] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:27] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:28] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:28] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:28] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:28] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:28] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.username AS username_1, u0_.email AS email_2, u0_.roles AS roles_3, u0_.password AS password_4, u0_.created_at AS created_at_5, u0_.updated_at AS updated_at_6 FROM `user` u0_ ORDER BY u0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:33] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 22:38:33] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:33] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:33] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:33] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:34] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:34] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:34] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:34] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:34] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:36] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 22:38:36] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:36] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:36] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:36] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:36] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:36] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:36] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:36] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:36] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:38] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 22:38:38] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:38] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:38] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:38] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:38] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:38] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:38] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:38] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:39] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:52] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 22:38:52] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:38:52] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:52] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:52] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:53] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:38:53] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:53] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:53] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:38:53] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 22:38:53] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 22:39:06] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 22:39:07] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:39:07] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:07] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:07] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:07] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:39:07] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:07] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:07] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:07] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 22:39:07] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 22:39:11] request.INFO: Matched route "api_celebrities_get_collection". {"route":"api_celebrities_get_collection","route_parameters":{"_route":"api_celebrities_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Celebrity","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/celebrities","method":"GET"} []
[2021-10-18 22:39:11] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:39:11] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:11] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:11] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:39:11] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:11] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:11] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:12] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.name AS name_1, c0_.birthday AS birthday_2, c0_.bio AS bio_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM celebrity c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2021-10-18 22:39:12] request.INFO: Matched route "api_representatives_get_collection". {"route":"api_representatives_get_collection","route_parameters":{"_route":"api_representatives_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Representative","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/representatives","method":"GET"} []
[2021-10-18 22:39:12] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:39:12] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:12] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:12] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:12] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:39:12] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:12] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:12] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:13] doctrine.DEBUG: SELECT DISTINCT r0_.id AS id_0, r0_.id AS id_1 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id ORDER BY r0_.id ASC LIMIT 30 [] []
[2021-10-18 22:39:13] doctrine.DEBUG: SELECT r0_.id AS id_0, r0_.name AS name_1, r0_.company AS company_2, r0_.created_at AS created_at_3, r0_.updated_at AS updated_at_4, e1_.id AS id_5, e1_.adress AS adress_6, e1_.representative_id AS representative_id_7 FROM representative r0_ LEFT JOIN email_adress e1_ ON r0_.id = e1_.representative_id WHERE r0_.id IN (?) ORDER BY r0_.id ASC [[1,2,3]] []
[2021-10-18 22:39:25] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 22:39:25] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 22:39:25] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:25] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:25] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:25] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 22:39:25] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:25] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:25] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 22:39:25] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.id ASC LIMIT 30 [] []
[2021-10-18 23:00:03] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-18 23:00:03] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:00:03] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-18 23:00:05] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:00:05] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:00:05] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:00:05] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:00:05] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:00:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:00:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:00:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:00:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:00:06] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:15:26] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:15:26] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:15:26] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:15:26] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:15:26] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:15:26] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:15:26] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:15:26] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:15:26] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:15:26] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:16:08] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:16:08] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:16:08] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:08] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:08] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:08] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:16:08] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:08] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:08] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:08] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:16:21] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:16:21] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:16:21] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:21] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:21] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:22] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:16:22] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:22] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:22] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:22] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:16:47] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:16:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:16:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:48] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:16:48] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:48] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:48] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:48] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:16:54] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:16:54] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:16:54] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:54] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:54] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:54] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:16:54] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:54] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:54] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:16:54] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:17:35] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:17:35] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:17:35] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:35] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:35] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:35] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:17:35] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:35] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:35] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:35] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:17:59] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:17:59] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:17:59] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:59] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:59] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:17:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:17:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:00] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:18:05] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:18:06] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:18:06] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:06] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:06] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:06] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:18:06] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:06] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:06] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:06] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:18:40] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:18:40] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:18:40] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:40] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:40] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:41] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:18:41] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:41] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:41] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:41] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:18:58] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:18:58] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:18:58] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:58] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:58] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:18:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:18:59] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:20:04] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:20:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:20:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:20:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:20:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:20:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:20:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:20:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:20:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:20:05] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:27:04] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:27:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:27:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:27:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:27:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:27:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:27:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:27:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:27:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:27:05] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:29:38] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:29:38] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:29:38] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:38] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:38] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:39] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:29:39] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:39] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:39] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:39] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:29:42] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:29:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:29:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:42] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:29:43] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:43] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:43] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:43] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:29:45] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:29:45] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:29:45] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:45] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:45] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:45] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:29:45] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:45] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:45] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:45] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:29:50] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:29:50] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:29:50] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:50] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:50] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:50] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:29:50] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:50] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:50] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:29:50] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:30:44] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:30:44] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:30:44] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:44] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:44] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:45] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:30:45] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:45] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:45] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:45] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:30:53] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:30:53] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:30:53] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:53] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:53] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:53] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:30:53] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:53] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:53] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:30:54] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:31:00] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:31:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:31:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:31:00] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:01] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:31:07] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:31:07] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:31:07] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:07] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:07] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:07] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:31:07] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:07] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:07] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:07] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:31:10] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:31:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:31:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:31:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:11] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:31:42] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:31:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:31:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:43] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:31:43] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:43] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:43] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:43] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:31:47] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:31:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:31:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:47] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:31:47] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:47] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:47] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:31:47] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:32:10] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:32:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:32:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:32:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:32:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:32:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:32:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:32:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:32:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:32:10] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:04] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:04] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:04] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:04] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:04] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:05] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:13] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:13] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:13] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:13] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:13] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:14] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:19] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:19] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:19] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:19] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:19] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:19] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:19] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:19] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:19] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:19] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:43] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:43] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:43] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:43] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:43] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:44] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:44] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:44] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:44] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:44] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:46] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:46] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:46] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:46] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:46] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:46] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:46] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:46] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:46] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:46] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:51] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:51] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:51] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:51] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:51] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:51] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:51] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:51] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:51] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:51] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:33:57] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:33:57] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:33:57] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:57] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:57] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:57] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:33:57] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:57] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:57] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:33:57] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:01] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:01] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:01] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:01] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:01] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:01] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:01] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:01] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:01] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:01] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:04] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:04] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:04] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:04] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:04] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:05] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:05] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:05] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:05] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:05] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:10] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:11] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:11] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:11] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:11] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:18] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:19] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:19] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:19] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:19] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:19] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:26] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:26] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:26] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:26] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:26] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:26] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:26] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:26] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:26] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:27] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:31] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:31] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:31] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:31] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:31] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:31] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:31] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:31] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:31] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:31] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:34:59] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:34:59] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:34:59] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:59] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:59] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:59] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:34:59] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:59] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:59] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:34:59] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:35:02] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:35:02] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:35:02] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:02] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:02] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:02] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:35:02] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:02] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:02] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:02] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:35:07] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:35:07] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:35:07] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:07] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:07] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:07] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:35:07] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:07] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:07] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:08] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:35:11] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:35:11] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:35:11] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:11] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:11] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:35:11] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:11] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:11] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:35:11] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:36:07] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:36:07] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:36:07] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:07] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:07] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:07] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:36:07] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:07] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:07] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:07] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:36:10] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:36:10] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:36:10] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:10] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:10] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:10] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:36:10] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:10] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:10] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:36:10] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:37:45] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:37:45] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:37:45] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:45] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:45] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:46] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:37:46] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:46] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:46] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:46] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:37:50] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:37:50] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:37:50] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:50] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:50] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:50] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:37:50] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:50] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:50] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:37:50] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:42:19] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:42:19] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:42:19] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:19] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:19] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:20] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:42:20] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:20] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:20] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:20] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:42:31] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:42:31] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:42:31] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:31] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:31] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:32] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:42:32] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:32] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:32] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:32] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:42:37] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:42:37] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:42:37] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:37] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:37] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:37] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:42:37] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:37] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:37] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:42:37] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:47:32] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:47:33] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:47:33] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:47:33] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:47:33] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:47:33] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:47:33] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:47:33] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:47:33] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:47:33] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:48:47] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:48:47] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:48:47] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:47] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:47] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:48] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:48:48] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:48] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:48] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:48] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:48:55] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:48:55] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:48:55] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:55] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:55] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:55] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:48:55] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:55] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:55] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:48:55] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:49:18] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:49:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:49:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:18] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:49:18] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:18] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:18] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:19] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:49:46] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:49:46] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:49:46] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:46] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:46] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:46] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:49:46] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:46] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:46] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:49:46] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:50:06] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:50:06] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:50:06] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:06] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:06] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:06] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:50:06] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:06] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:06] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:06] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:50:29] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:50:29] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:50:29] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:29] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:29] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:30] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:50:30] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:30] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:30] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:30] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:50:40] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:50:41] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:50:41] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:41] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:41] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:41] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:50:41] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:41] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:41] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:41] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:50:43] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:50:43] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:50:43] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:43] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:43] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:43] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:50:43] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:43] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:43] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:43] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:50:48] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:50:48] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:50:48] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:48] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:48] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:49] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:50:49] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:49] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:49] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:50:49] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:52:28] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:52:28] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:52:28] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:28] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:28] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:29] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:52:29] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:29] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:29] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:29] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:52:38] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:52:38] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:52:38] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:38] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:38] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:38] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:52:38] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:38] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:38] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:38] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:52:56] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:52:56] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:52:56] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:56] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:56] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:57] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:52:57] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:57] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:57] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:52:57] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:53:13] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:53:13] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:53:13] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:53:13] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:53:13] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:53:13] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:53:13] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:53:13] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:53:13] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:53:13] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:55:28] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:55:28] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:55:28] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:28] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:28] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:28] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:55:29] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:29] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:29] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:29] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-18 23:55:36] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-18 23:55:36] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-18 23:55:36] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:36] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:36] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:37] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-18 23:55:37] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:37] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:37] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-18 23:55:37] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:03:19] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2021-10-19 00:03:19] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:03:20] security.INFO: User has been authenticated successfully. {"username":"root"} []
[2021-10-19 00:03:21] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:03:21] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:03:21] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:03:21] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:03:21] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:03:21] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:03:21] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:03:21] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:03:21] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:03:22] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:05:18] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:05:18] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:05:18] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:05:18] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:05:18] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:05:18] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:05:18] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:05:18] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:05:18] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:05:18] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:08:36] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:08:36] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:08:36] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:36] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:36] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:36] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:08:36] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:36] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:36] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:36] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:08:42] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:08:42] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:08:42] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:42] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:42] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:42] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:08:42] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:42] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:42] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:42] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:08:57] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:08:57] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:08:57] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:57] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:57] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:57] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:08:57] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:57] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:57] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:08:57] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:09:03] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:09:03] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:09:03] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:03] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:03] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:03] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:09:03] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:03] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:03] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:03] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
[2021-10-19 00:09:11] request.INFO: Matched route "api_logs_get_collection". {"route":"api_logs_get_collection","route_parameters":{"_route":"api_logs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_stateless":null,"_api_resource_class":"App\\Entity\\Log","_api_identifiers":["id"],"_api_has_composite_identifier":false,"_api_collection_operation_name":"get"},"request_uri":"http://127.0.0.1:8000/api/logs","method":"GET"} []
[2021-10-19 00:09:11] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2021-10-19 00:09:11] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:11] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:11] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:11] doctrine.DEBUG: SELECT t0.id AS id_1, t0.username AS username_2, t0.email AS email_3, t0.roles AS roles_4, t0.password AS password_5, t0.created_at AS created_at_6, t0.updated_at AS updated_at_7 FROM `user` t0 WHERE t0.username = ? LIMIT 1 ["root"] []
[2021-10-19 00:09:11] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"root\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:11] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:11] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2021-10-19 00:09:11] doctrine.DEBUG: SELECT l0_.id AS id_0, l0_.message AS message_1, l0_.context AS context_2, l0_.level AS level_3, l0_.level_name AS level_name_4, l0_.extra AS extra_5, l0_.created_at AS created_at_6, l0_.user_id AS user_id_7 FROM log l0_ ORDER BY l0_.created_at DESC LIMIT 30 [] []
